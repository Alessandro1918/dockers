version: "3.7"

services:

  #This service (server.js, based on Node) could run @ localhost, outside the Docker container. This way, the user could run it only after â€œdb" service is OK, without service dependency or health checks.
  app:
    image: node:alpine
    # container_name: app-container
    working_dir: /usr/app
    command: npm run compose_dev
    volumes:
      - .:/usr/app
      - /usr/app/node_modules
    ports:
      - "4000:4000"
    depends_on:
      mysql-db:
        condition: service_healthy

  mysql-db:
    image: mysql
    platform: linux/arm64
    # container_name: mysql-container
    #V1 - Map vars one by one, if service vars are not named like ".env" file vars:
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # MYSQL_USER: ${DATABASE_USER}          #Docker service uses a default value for this field
      # MYSQL_PASSWORD: ${DATABASE_PASSWORD}  #Docker service uses a default value for this field
      # MYSQL_HOST: ${DATABASE_HOST}          #Docker service uses a default value for this field
      # MYSQL_PORT: ${DATABASE_PORT}          #Docker service uses a default value for this field
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    #V2 - Give the service access to the entire ".env" file:
    # env_file:
    #   - .env
    volumes:
      - ./mysql-data:/var/lib/mysql
    #No need to expose (publish) the mysql port out of the container, if the main service (here named "app") is also inside the same container:
    # ports:
    # - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 10s
      retries: 5
