#With docker-compose.yml:
#Can create vars with any name and map them to the container ones;
#.env file can have spaces;
#Can have in-line comments;

# SERVER_PORT = 4000

#1. Server and db @ localhost:
# DATABASE_USER = XXX                   #my postgres client username
# DATABASE_PASSWORD = XXX               #my postgres client master password
# DATABASE_HOST = localhost
# DATABASE_PORT = 5433                  #postgres default port is 5432, but my local client is set to 5433
# DATABASE_NAME = docker-node-postgres  #name of the db saved on my postgres client

#2. Server and db @ Docker:
# DATABASE_USER = user123                 #Used by docker service       #could be anything
# DATABASE_PASSWORD = pass123             #Used by docker service       #could be anything
# DATABASE_HOST = pg-db                   #Not used by docker service   #name of my postgres service on the docker-compose.yml file
# DATABASE_PORT = 5432                    #Not used by docker service   #postgres default port
# DATABASE_NAME = docker-node-postgres    #Used by docker service       #could be anything

#3. Server @ localhost, db @ Docker: same config as db @ Docker, but:
# DATABASE_HOST = localhost

#With Dockerfile:
#Vars have to be named exactly like the container expect them;
#The .env file can't have any whitespaces;
#server.js (could omit this block if I had named all vars as expected ("PG_USER") instead of custom ("DB_USER")):

#1. Server @ localhost, db @ Docker: passing .env file to Dockerfile:
#Dockerfile:
POSTGRES_USER=XXX
POSTGRES_PASSWORD=YYY
POSTGRES_DB=docker-node-postgres
#server.js (could omit this block if I had named all vars as expected ("PG_USER") instead of custom ("DB_USER")):
SERVER_PORT=4000
DATABASE_USER=XXX
DATABASE_PASSWORD=YYY
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=docker-node-postgres